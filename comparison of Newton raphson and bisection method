def compare_methods(f, df, a, b, tol=1e-6, max_iter=100):
    a_bisect, b_bisect = a, b
    bisect_steps = 0
    bisect_root = None
    for _ in range(max_iter):
        c = (a_bisect + b_bisect)/2
        bisect_steps += 1
        if abs(f(c)) < tol:
            bisect_root = c
            break
        if f(c)*f(a_bisect) < 0:
            b_bisect = c
        else:
            a_bisect = c
    x = (a + b)/2 
    newton_steps = 0
    newton_root = None
    for _ in range(max_iter):
        newton_steps += 1
        if abs(f(x)) < tol:
            newton_root = x
            break
        x -= f(x)/df(x)
    return {
        'Bisection': {'steps': bisect_steps, 'root': bisect_root},
        'Newton-Raphson': {'steps': newton_steps, 'root': newton_root}
    }
def f(x):
    return x**2 - 4*x - 5
def df(x):
    return 2*x - 4     
results = compare_methods(f, df, 2, 10, tol=1e-6)
print("Method\t\tRoot\t\t\tSteps")
print(f"Bisection\t{results['Bisection']['root']:.8f}\t{results['Bisection']['steps']}")
print(f"Newton\t\t{results['Newton-Raphson']['root']:.8f}\t{results['Newton-Raphson']['steps']}")